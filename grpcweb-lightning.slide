gRPC-Web with GopherJS
19 Sep 2017

Johan Brandhorst
Backend Developer, InfoSum
johan.brandhorst@gmail.com
@johanbrandhorst
https://jbrandhorst.com

: I'm Johan, InfoSum, we're a Big Data startup in Basingstoke.
: I've been using Go for 1.5 years, loving it. I've contributed to the Go programming language
: and I run my own Go blog, writing mostly about things related to my open source projects and gRPC.
: I'm here today to talk about my open source GopherJS gRPC-Web Bindings.

* Introduction

- GopherJS
- gRPC-Web
- Websockets

.image better_way.svg


: These are the 3 major technologies I built my library on.
: I first heard of gRPC-Web about the same time as I was first playing around with GopherJS, and I thought they'd
: make for an excellent combination in an open source project. GopherJS, for the uninitiated, is a Go to JS Transpiler,
: unlocking the magic of Go in the frontend and, more importantly, saving us from having to write any JavaScript.
: gRPC-Web is a new project for making communications between the frontend and backend as easy as gRPC has made
: inter-microservice communication. There was an effort from Google to release an official client, scheduled for Q1 2017,
: but it seems the will to release that has died down for now. Instead, Improbable released their third party
: spec compliant implementation in April 2017, and this is the version I've built my library on.
: Websockets are supported by all major browsers and allow bidirectional streaming between the frontend and backend.
: They are used in my library to support client-side and bidirectional streaming from the browser.

* GopherJS gRPC-Web and Protobuf bindings

- Combining the benefits of GopherJS with the benefits of gRPC-Web
- [[https://github.com/johanbrandhorst/protobuf]]
- `protoc-gen-gopherjs` built on top of GopherJS ProtobufJS bindings
- No dependency on `protoc`-generated JS files
- Supports Client-side streaming via Websocket proxy

: My GopherJS gRPC-Web bindings allow the user to write a normal gRPC server backend and consume it from a GopherJS app
: in the frontend. All streaming modes are supported, even client side and bidirectional streaming, which is not supported
: by the Improbable gRPC-Web client. This is in addition to the official gRPC-Web spec which does not define any support
: for client side or bidirectional streaming at this time.
: Lets show how we can use it.

* Define the interface and generate the code

.code book_service.proto /START OMIT/,/END OMIT/

Get the plugin:

    go get -u github.com/johanbrandhorst/protobuf/protoc-gen-gopherjs

Generate with protoc:

    protoc --gopherjs_out=plugins=grpc:./client/proto/library/ proto/book_service.proto

: This abbreviated example shows how to define RPC methods with the 4 different modes: Unary, Server Streaming, Client Streaming and Bidirectionally streaming.
: The full proto file can be found on my example repo.
: The generation step requires protoc-gen-gopherjs to be installed, which you can get by running go get ...
: This generation leaves us with the package "library" which provides the interface our frontend code can use.
: Of course, the same protofile should be used to generate the backend interface.

* Import generated packages

.code generated.go

: If you've ever written a gRPC Go Client before this step should feel very familiar. The code generated by protoc-gen-gopherjs
: is designed to be as similar as possible to that of a native Go client. We have a function for creating
: a new client for each service defined, and methods for each endpoint on that service.
: Note that all the methods are blocking, and since we're working with Go that gets compiled to Javascript,
: it means we have to wrap all our calls in goroutines. It's one of the quirks of GopherJS.
: I'm not going to show too much of the client code here because it can be implemented in many different ways.

* Demo

Visit https://grpcweb.jbrandhorst.com to join the chat!
.iframe https://grpcweb.jbrandhorst.com/ 500 975

* Conclusion

gRPC-Web makes the frontend a first class citizen of the gRPC ecosystem.

.image grpc_with_web.svg 500 975

: We've shown that it's possible today to write a frontend client in Go, communicate with a regular
: Go backend over HTTP2/Websockets gRPC via a proxy. The future is now!

* Questions?

.image gopher.png _ 400
Credit: [[http://reneefrench.blogspot.co.uk/2014/08/blog-post_4.html][Renee French]]

* Links and Thanks

- [[https://github.com/johanbrandhorst/protobuf][The GopherJS Protobuf repo]]
- [[https://github.com/johanbrandhorst/grpcweb-example][The demo website repo]]
- [[https://github.com/improbable-eng/grpc-web][The Improbable TypeScript gRPC-Web Client]]
- [[https://github.com/myitcv/react/wiki][Pauls GopherJS React Bindings]]
- [[https://jbrandhorst.com/post/gopherjs-grpcweb/][My blog post further detailing the GopherJS gRPC-Web Bindings]]

Thanks

- [[https://improbable.io][Improbable]] for their amazing gRPC-Web library (special shoutout to [[https://twitter.com/mwitkow][@mwitkow]] for his amazing gRPC community contributions)
- [[https://github.com/neelance][Richard Musiol]], [[https://github.com/shurcooL][Dmitry Shuralyov]] and others in the GopherJS community
- [[https://twitter.com/_myitcv][Paul Jolly]] for his excellent work on GopherJS and the React bindings

